1Ô∏è‚É£ List all unique product categories available in the store.

SELECT DISTINCT category FROM products;


2Ô∏è‚É£ Find all transactions made in 2025.

SELECT * FROM sales_transactions
WHERE YEAR(transaction_date) = 2025;


3Ô∏è‚É£ Show the top 10 most expensive products (in ZAR).

SELECT product_name, category, unit_price_ZAR
FROM products
ORDER BY unit_price_ZAR DESC
LIMIT 10;

üîπ Aggregations & Summaries

4Ô∏è‚É£ Calculate total revenue per product.

SELECT p.product_name,
       SUM(s.quantity * p.unit_price_ZAR) AS total_revenue_ZAR
FROM sales_transactions s
JOIN products p ON s.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_revenue_ZAR DESC;


5Ô∏è‚É£ Find total quantity sold per category.

SELECT p.category,
       SUM(s.quantity) AS total_quantity_sold
FROM sales_transactions s
JOIN products p ON s.product_id = p.product_id
GROUP BY p.category
ORDER BY total_quantity_sold DESC;


6Ô∏è‚É£ Calculate total revenue per region.

SELECT st.region,
       SUM(s.quantity * p.unit_price_ZAR) AS total_revenue_ZAR
FROM sales_transactions s
JOIN products p ON s.product_id = p.product_id
JOIN stores st ON s.store_id = st.store_id
GROUP BY st.region
ORDER BY total_revenue_ZAR DESC;

üîπ Time-based Analysis

7Ô∏è‚É£ Find monthly sales trends for 2025.

SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month,
       SUM(quantity * unit_price_ZAR) AS revenue_ZAR
FROM sales_transactions s
JOIN products p ON s.product_id = p.product_id
WHERE YEAR(transaction_date) = 2025
GROUP BY TO_CHAR(transaction_date, 'YYYY-MM')
ORDER BY month;


8Ô∏è‚É£ Find which day of the week has the highest sales.

SELECT TO_CHAR(transaction_date, 'DY') AS day_of_week,
       SUM(quantity * unit_price_ZAR) AS revenue_ZAR
FROM sales_transactions s
JOIN products p ON s.product_id = p.product_id
GROUP BY TO_CHAR(transaction_date, 'DY')
ORDER BY revenue_ZAR DESC;

üîπ Customer Insights

9Ô∏è‚É£ Find top 10 loyal customers by total revenue.

SELECT c.first_name, c.last_name,
       SUM(s.quantity * p.unit_price_ZAR) AS total_spent_ZAR
FROM sales_transactions s
JOIN products p ON s.product_id = p.product_id
JOIN customers c ON s.customer_id = c.customer_id
WHERE c.loyalty_member = 'Yes'
GROUP BY c.first_name, c.last_name
ORDER BY total_spent_ZAR DESC
LIMIT 10;


üîü Calculate average spending per customer.

SELECT AVG(total_spent) AS avg_customer_spending_ZAR
FROM (
    SELECT c.customer_id,
           SUM(s.quantity * p.unit_price_ZAR) AS total_spent
    FROM sales_transactions s
    JOIN products p ON s.product_id = p.product_id
    JOIN customers c ON s.customer_id = c.customer_id
    GROUP BY c.customer_id
);

üîπ Advanced Joins & Filtering

11Ô∏è‚É£ Find stores with the highest sales in each region.

SELECT st.region, st.store_name,
       SUM(s.quantity * p.unit_price_ZAR) AS store_sales_ZAR
FROM sales_transactions s
JOIN products p ON s.product_id = p.product_id
JOIN stores st ON s.store_id = st.store_id
GROUP BY st.region, st.store_name
QUALIFY ROW_NUMBER() OVER (PARTITION BY st.region ORDER BY store_sales_ZAR DESC) = 1;


12Ô∏è‚É£ List all transactions where more than 5 units were sold in a single purchase.

SELECT *
FROM sales_transactions
WHERE quantity > 5;


13Ô∏è‚É£ Find total revenue generated by loyalty vs non-loyalty customers.

SELECT c.loyalty_member,
       SUM(s.quantity * p.unit_price_ZAR) AS total_revenue_ZAR
FROM sales_transactions s
JOIN products p ON s.product_id = p.product_id
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.loyalty_member;

üîπ Derived Columns & Case Statements

14Ô∏è‚É£ Categorize transactions by time of day.

SELECT s.transaction_id,
       CASE
           WHEN s.transaction_time BETWEEN '06:00:00' AND '11:59:59' THEN 'Morning'
           WHEN s.transaction_time BETWEEN '12:00:00' AND '17:59:59' THEN 'Afternoon'
           WHEN s.transaction_time BETWEEN '18:00:00' AND '23:59:59' THEN 'Evening'
           ELSE 'Night'
       END AS time_of_day,
       p.product_name,
       s.quantity,
       s.transaction_date
FROM sales_transactions s
JOIN products p ON s.product_id = p.product_id;


15Ô∏è‚É£ Find the best-selling supplier by total revenue.

SELECT p.supplier,
       SUM(s.quantity * p.unit_price_ZAR) AS total_revenue_ZAR
FROM sales_transactions s
JOIN products p ON s.product_id = p.product_id
GROUP BY p.supplier
ORDER BY total_revenue_ZAR DESC;
